/* Makefile for mit
   (c) Reuben Thomas 1999
*/


#include "gcc"
#include "program"

me = mit; /* what about endian? */
/* PROGS = mit endian; */
mite_top = ..;


/* Programs and options */

cc_warn = -Wall -W -Wundef -Wpointer-arith -Wbad-function-cast -Wcast-qual
       -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes;
cc_opts = -ansi -pedantic -g;
cc_flags = [cc_opts] [cc_warn];
ld_libraries = -lm;

run_lua = lua -f [mite_top]/script/runLua.lua [mite_top];


/* Source files */

/* #include-cooked translator.make
TRANS_OBJS = [patsubst %.c %.o [TRANS_SRCS]];
SRCS = mit.c translate.c except.c list.c hash.c flen.c insts.c; */


/* Generated files */
/* OBJS = [patsubst %.c %.o [SRCS] [TRANS_SRCS]];
   GEN_SRCS = instEnum.h insts.gperf insts.c endian.h; */


/* Top-level targets */

/* all: mit;

depend: [SRCS] [GEN_SRCS] [TRANS_SRCS]
{
	mkdep -p [CFLAGS] [SRCS] [TRANS_SRCS];
}

clean:
{
	rm -f [OBJS];
}

dist-clean: clean
{
	rm -f [PROGS] [GEN_SRCS] [TRANS_SRCS];
} */


/* File dependencies */

/* mit: [OBJS]
{
	[cc] -o [target] [resolve [need]] [LDFLAGS];
} */

/* avoid spurious warnings when compiling gperf output */
insts.o:
{
	[cc] -c [cc_opts] -o [target] [resolve [head [need]]];
}

insts.c: insts.gperf
{
	gperf -L ANSI-C -N findInst -t -k 1,2,\'$\' [resolve [head [need]]] > [target];
}

endian.h: endian.c
{
	[cc] -o endian endian.c;
	./endian > [target];
}

insts.gperf translate.h instEnum.h: [mite_top]/spec.lua procSpec.lua
{
	[run_lua] procSpec.lua;
	touch translate.h;
}


/* Include dependencies */

#include-cooked .depend
