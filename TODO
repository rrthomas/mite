Release version 2 with a suitable amount of the following done.

Resurrect object reader (and asm writer?).

Add some tests (see below).

Use wrap() to indent text while building translators.c. Use \t to
indicate indentation, and pre-expand tabs.

Add the list of instrumenters to translators.c.

Get interpreter working.

Add debugging and optimised builds to Makefile.

Allow translators to be named so that a given reader-writer pair can
be built with different sets of instrumentation.

Make Mite into a library, with a public header.

Document code properly, using something like doxygen (preferably
coping with Lua as well, or at least with the option to cope with
Python).

Construct a util.lua to avoid relying on my std lib.

Rewrite scripts in Python for better definition of the type of a
reader and writer, and easier debugging in future.

Make a distribution that can easily be compiled with any ISO C
compiler (preferably a single C file).

Make a file bundle release (just a tar of the contents of CVS).

Check out & build Mite on a clean system.

Reduce the number of warnings given by gcc.


Check whether shifts of type size are allowed, and stop using them if
not.

Inst{"calln",  {"r"},            "call native code at $%1$"},


Test system:

Describe tests in the form:

test = {
  input = "<input>",
  input_type = "<in-type>",
  output_type = "<out-type>",
  flags = "<flags-to-mit>",
  output = { <list-of-outputs> }
}

and run

  mit <flags to mit> -.<in type> -.<out type> 2>1

The output is piped back in and compared against each output in the
test table, which can be either genuine output or an error. If one
matches, the test passes; otherwise it fails.

Have another script that takes an input file, input type, output type
and flags, and produces a test file from it.


Extensions:

Accessing dynamic libs: return the address of the given symbol; should
work at least for the standard C library.

FP instruction set (using new reg set, use only 64-bit IEEE numbers).

Higher level calling: use SWIG or libffi

Safe memory access (just ld/st): to do this, only allow addresses in
range of static data area or areas returned by special malloc function
(which can just be a wrapper for malloc, or for greater efficiency,
malloc recompiled to allocate in an area provided by mit).


Separate compilation of Mite code

Use a custom format, and dynamic linking.

Allow dynamic linking? Mite code could be DLed to native code. Would
need to distinguish Mite symbols from native ones. Review work on
dynamic loading in Lua to find a good method.

Mite starts by loading a single object file. All other facilities can
be provided in virtual code; just need to add access to libffi/Swig. 
Allow Mite modules to be loaded and linked in. Preferably possible to
load just code (no symbols) if desired. Need export/import labels for
Mite and native symbols.

Addresses can only be known after word-length independence adjustment.


Good magic value for 7-coded stream: 37F06EDh (becomes 1B7C0DEDh when
7-coded).
